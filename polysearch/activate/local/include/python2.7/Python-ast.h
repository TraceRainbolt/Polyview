/* File automatically generated by Parser/asdl_c.py. */

#include "asdl.h"

typedef struct _mod *mod_ty;

typedef struct _stmt *stmt_ty;

typedef struct _expr *expr_ty;

typedef enum _expr_context { Load=1, Store=2, Del=3, AugLoad=4, AugStore=5,
                             Param=6 ***REMOVED*** expr_context_ty;

typedef struct _slice *slice_ty;

typedef enum _boolop { And=1, Or=2 ***REMOVED*** boolop_ty;

typedef enum _operator { Add=1, Sub=2, Mult=3, Div=4, Mod=5, Pow=6, LShift=7,
                         RShift=8, BitOr=9, BitXor=10, BitAnd=11, FloorDiv=12 ***REMOVED***
                         operator_ty;

typedef enum _unaryop { Invert=1, Not=2, UAdd=3, USub=4 ***REMOVED*** unaryop_ty;

typedef enum _cmpop { Eq=1, NotEq=2, Lt=3, LtE=4, Gt=5, GtE=6, Is=7, IsNot=8,
                      In=9, NotIn=10 ***REMOVED*** cmpop_ty;

typedef struct _comprehension *comprehension_ty;

typedef struct _excepthandler *excepthandler_ty;

typedef struct _arguments *arguments_ty;

typedef struct _keyword *keyword_ty;

typedef struct _alias *alias_ty;


enum _mod_kind {Module_kind=1, Interactive_kind=2, Expression_kind=3,
                 Suite_kind=4***REMOVED***;
struct _mod {
        enum _mod_kind kind;
        union {
                struct {
                        asdl_seq *body;
            ***REMOVED*** Module;
                
                struct {
                        asdl_seq *body;
            ***REMOVED*** Interactive;
                
                struct {
                        expr_ty body;
            ***REMOVED*** Expression;
                
                struct {
                        asdl_seq *body;
            ***REMOVED*** Suite;
                
    ***REMOVED*** v;
***REMOVED***;

enum _stmt_kind {FunctionDef_kind=1, ClassDef_kind=2, Return_kind=3,
                  Delete_kind=4, Assign_kind=5, AugAssign_kind=6, Print_kind=7,
                  For_kind=8, While_kind=9, If_kind=10, With_kind=11,
                  Raise_kind=12, TryExcept_kind=13, TryFinally_kind=14,
                  Assert_kind=15, Import_kind=16, ImportFrom_kind=17,
                  Exec_kind=18, Global_kind=19, Expr_kind=20, Pass_kind=21,
                  Break_kind=22, Continue_kind=23***REMOVED***;
struct _stmt {
        enum _stmt_kind kind;
        union {
                struct {
                        identifier name;
                        arguments_ty args;
                        asdl_seq *body;
                        asdl_seq *decorator_list;
            ***REMOVED*** FunctionDef;
                
                struct {
                        identifier name;
                        asdl_seq *bases;
                        asdl_seq *body;
                        asdl_seq *decorator_list;
            ***REMOVED*** ClassDef;
                
                struct {
                        expr_ty value;
            ***REMOVED*** Return;
                
                struct {
                        asdl_seq *targets;
            ***REMOVED*** Delete;
                
                struct {
                        asdl_seq *targets;
                        expr_ty value;
            ***REMOVED*** Assign;
                
                struct {
                        expr_ty target;
                        operator_ty op;
                        expr_ty value;
            ***REMOVED*** AugAssign;
                
                struct {
                        expr_ty dest;
                        asdl_seq *values;
                        bool nl;
            ***REMOVED*** Print;
                
                struct {
                        expr_ty target;
                        expr_ty iter;
                        asdl_seq *body;
                        asdl_seq *orelse;
            ***REMOVED*** For;
                
                struct {
                        expr_ty test;
                        asdl_seq *body;
                        asdl_seq *orelse;
            ***REMOVED*** While;
                
                struct {
                        expr_ty test;
                        asdl_seq *body;
                        asdl_seq *orelse;
            ***REMOVED*** If;
                
                struct {
                        expr_ty context_expr;
                        expr_ty optional_vars;
                        asdl_seq *body;
            ***REMOVED*** With;
                
                struct {
                        expr_ty type;
                        expr_ty inst;
                        expr_ty tback;
            ***REMOVED*** Raise;
                
                struct {
                        asdl_seq *body;
                        asdl_seq *handlers;
                        asdl_seq *orelse;
            ***REMOVED*** TryExcept;
                
                struct {
                        asdl_seq *body;
                        asdl_seq *finalbody;
            ***REMOVED*** TryFinally;
                
                struct {
                        expr_ty test;
                        expr_ty msg;
            ***REMOVED*** Assert;
                
                struct {
                        asdl_seq *names;
            ***REMOVED*** Import;
                
                struct {
                        identifier module;
                        asdl_seq *names;
                        int level;
            ***REMOVED*** ImportFrom;
                
                struct {
                        expr_ty body;
                        expr_ty globals;
                        expr_ty locals;
            ***REMOVED*** Exec;
                
                struct {
                        asdl_seq *names;
            ***REMOVED*** Global;
                
                struct {
                        expr_ty value;
            ***REMOVED*** Expr;
                
    ***REMOVED*** v;
        int lineno;
        int col_offset;
***REMOVED***;

enum _expr_kind {BoolOp_kind=1, BinOp_kind=2, UnaryOp_kind=3, Lambda_kind=4,
                  IfExp_kind=5, Dict_kind=6, Set_kind=7, ListComp_kind=8,
                  SetComp_kind=9, DictComp_kind=10, GeneratorExp_kind=11,
                  Yield_kind=12, Compare_kind=13, Call_kind=14, Repr_kind=15,
                  Num_kind=16, Str_kind=17, Attribute_kind=18,
                  Subscript_kind=19, Name_kind=20, List_kind=21, Tuple_kind=22***REMOVED***;
struct _expr {
        enum _expr_kind kind;
        union {
                struct {
                        boolop_ty op;
                        asdl_seq *values;
            ***REMOVED*** BoolOp;
                
                struct {
                        expr_ty left;
                        operator_ty op;
                        expr_ty right;
            ***REMOVED*** BinOp;
                
                struct {
                        unaryop_ty op;
                        expr_ty operand;
            ***REMOVED*** UnaryOp;
                
                struct {
                        arguments_ty args;
                        expr_ty body;
            ***REMOVED*** Lambda;
                
                struct {
                        expr_ty test;
                        expr_ty body;
                        expr_ty orelse;
            ***REMOVED*** IfExp;
                
                struct {
                        asdl_seq *keys;
                        asdl_seq *values;
            ***REMOVED*** Dict;
                
                struct {
                        asdl_seq *elts;
            ***REMOVED*** Set;
                
                struct {
                        expr_ty elt;
                        asdl_seq *generators;
            ***REMOVED*** ListComp;
                
                struct {
                        expr_ty elt;
                        asdl_seq *generators;
            ***REMOVED*** SetComp;
                
                struct {
                        expr_ty key;
                        expr_ty value;
                        asdl_seq *generators;
            ***REMOVED*** DictComp;
                
                struct {
                        expr_ty elt;
                        asdl_seq *generators;
            ***REMOVED*** GeneratorExp;
                
                struct {
                        expr_ty value;
            ***REMOVED*** Yield;
                
                struct {
                        expr_ty left;
                        asdl_int_seq *ops;
                        asdl_seq *comparators;
            ***REMOVED*** Compare;
                
                struct {
                        expr_ty func;
                        asdl_seq *args;
                        asdl_seq *keywords;
                        expr_ty starargs;
                        expr_ty kwargs;
            ***REMOVED*** Call;
                
                struct {
                        expr_ty value;
            ***REMOVED*** Repr;
                
                struct {
                        object n;
            ***REMOVED*** Num;
                
                struct {
                        string s;
            ***REMOVED*** Str;
                
                struct {
                        expr_ty value;
                        identifier attr;
                        expr_context_ty ctx;
            ***REMOVED*** Attribute;
                
                struct {
                        expr_ty value;
                        slice_ty slice;
                        expr_context_ty ctx;
            ***REMOVED*** Subscript;
                
                struct {
                        identifier id;
                        expr_context_ty ctx;
            ***REMOVED*** Name;
                
                struct {
                        asdl_seq *elts;
                        expr_context_ty ctx;
            ***REMOVED*** List;
                
                struct {
                        asdl_seq *elts;
                        expr_context_ty ctx;
            ***REMOVED*** Tuple;
                
    ***REMOVED*** v;
        int lineno;
        int col_offset;
***REMOVED***;

enum _slice_kind {Ellipsis_kind=1, Slice_kind=2, ExtSlice_kind=3, Index_kind=4***REMOVED***;
struct _slice {
        enum _slice_kind kind;
        union {
                struct {
                        expr_ty lower;
                        expr_ty upper;
                        expr_ty step;
            ***REMOVED*** Slice;
                
                struct {
                        asdl_seq *dims;
            ***REMOVED*** ExtSlice;
                
                struct {
                        expr_ty value;
            ***REMOVED*** Index;
                
    ***REMOVED*** v;
***REMOVED***;

struct _comprehension {
        expr_ty target;
        expr_ty iter;
        asdl_seq *ifs;
***REMOVED***;

enum _excepthandler_kind {ExceptHandler_kind=1***REMOVED***;
struct _excepthandler {
        enum _excepthandler_kind kind;
        union {
                struct {
                        expr_ty type;
                        expr_ty name;
                        asdl_seq *body;
            ***REMOVED*** ExceptHandler;
                
    ***REMOVED*** v;
        int lineno;
        int col_offset;
***REMOVED***;

struct _arguments {
        asdl_seq *args;
        identifier vararg;
        identifier kwarg;
        asdl_seq *defaults;
***REMOVED***;

struct _keyword {
        identifier arg;
        expr_ty value;
***REMOVED***;

struct _alias {
        identifier name;
        identifier asname;
***REMOVED***;


#define Module(a0, a1***REMOVED*** _Py_Module(a0, a1***REMOVED***
mod_ty _Py_Module(asdl_seq * body, PyArena *arena***REMOVED***;
#define Interactive(a0, a1***REMOVED*** _Py_Interactive(a0, a1***REMOVED***
mod_ty _Py_Interactive(asdl_seq * body, PyArena *arena***REMOVED***;
#define Expression(a0, a1***REMOVED*** _Py_Expression(a0, a1***REMOVED***
mod_ty _Py_Expression(expr_ty body, PyArena *arena***REMOVED***;
#define Suite(a0, a1***REMOVED*** _Py_Suite(a0, a1***REMOVED***
mod_ty _Py_Suite(asdl_seq * body, PyArena *arena***REMOVED***;
#define FunctionDef(a0, a1, a2, a3, a4, a5, a6***REMOVED*** _Py_FunctionDef(a0, a1, a2, a3, a4, a5, a6***REMOVED***
stmt_ty _Py_FunctionDef(identifier name, arguments_ty args, asdl_seq * body,
                        asdl_seq * decorator_list, int lineno, int col_offset,
                        PyArena *arena***REMOVED***;
#define ClassDef(a0, a1, a2, a3, a4, a5, a6***REMOVED*** _Py_ClassDef(a0, a1, a2, a3, a4, a5, a6***REMOVED***
stmt_ty _Py_ClassDef(identifier name, asdl_seq * bases, asdl_seq * body,
                     asdl_seq * decorator_list, int lineno, int col_offset,
                     PyArena *arena***REMOVED***;
#define Return(a0, a1, a2, a3***REMOVED*** _Py_Return(a0, a1, a2, a3***REMOVED***
stmt_ty _Py_Return(expr_ty value, int lineno, int col_offset, PyArena *arena***REMOVED***;
#define Delete(a0, a1, a2, a3***REMOVED*** _Py_Delete(a0, a1, a2, a3***REMOVED***
stmt_ty _Py_Delete(asdl_seq * targets, int lineno, int col_offset, PyArena
                   *arena***REMOVED***;
#define Assign(a0, a1, a2, a3, a4***REMOVED*** _Py_Assign(a0, a1, a2, a3, a4***REMOVED***
stmt_ty _Py_Assign(asdl_seq * targets, expr_ty value, int lineno, int
                   col_offset, PyArena *arena***REMOVED***;
#define AugAssign(a0, a1, a2, a3, a4, a5***REMOVED*** _Py_AugAssign(a0, a1, a2, a3, a4, a5***REMOVED***
stmt_ty _Py_AugAssign(expr_ty target, operator_ty op, expr_ty value, int
                      lineno, int col_offset, PyArena *arena***REMOVED***;
#define Print(a0, a1, a2, a3, a4, a5***REMOVED*** _Py_Print(a0, a1, a2, a3, a4, a5***REMOVED***
stmt_ty _Py_Print(expr_ty dest, asdl_seq * values, bool nl, int lineno, int
                  col_offset, PyArena *arena***REMOVED***;
#define For(a0, a1, a2, a3, a4, a5, a6***REMOVED*** _Py_For(a0, a1, a2, a3, a4, a5, a6***REMOVED***
stmt_ty _Py_For(expr_ty target, expr_ty iter, asdl_seq * body, asdl_seq *
                orelse, int lineno, int col_offset, PyArena *arena***REMOVED***;
#define While(a0, a1, a2, a3, a4, a5***REMOVED*** _Py_While(a0, a1, a2, a3, a4, a5***REMOVED***
stmt_ty _Py_While(expr_ty test, asdl_seq * body, asdl_seq * orelse, int lineno,
                  int col_offset, PyArena *arena***REMOVED***;
#define If(a0, a1, a2, a3, a4, a5***REMOVED*** _Py_If(a0, a1, a2, a3, a4, a5***REMOVED***
stmt_ty _Py_If(expr_ty test, asdl_seq * body, asdl_seq * orelse, int lineno,
               int col_offset, PyArena *arena***REMOVED***;
#define With(a0, a1, a2, a3, a4, a5***REMOVED*** _Py_With(a0, a1, a2, a3, a4, a5***REMOVED***
stmt_ty _Py_With(expr_ty context_expr, expr_ty optional_vars, asdl_seq * body,
                 int lineno, int col_offset, PyArena *arena***REMOVED***;
#define Raise(a0, a1, a2, a3, a4, a5***REMOVED*** _Py_Raise(a0, a1, a2, a3, a4, a5***REMOVED***
stmt_ty _Py_Raise(expr_ty type, expr_ty inst, expr_ty tback, int lineno, int
                  col_offset, PyArena *arena***REMOVED***;
#define TryExcept(a0, a1, a2, a3, a4, a5***REMOVED*** _Py_TryExcept(a0, a1, a2, a3, a4, a5***REMOVED***
stmt_ty _Py_TryExcept(asdl_seq * body, asdl_seq * handlers, asdl_seq * orelse,
                      int lineno, int col_offset, PyArena *arena***REMOVED***;
#define TryFinally(a0, a1, a2, a3, a4***REMOVED*** _Py_TryFinally(a0, a1, a2, a3, a4***REMOVED***
stmt_ty _Py_TryFinally(asdl_seq * body, asdl_seq * finalbody, int lineno, int
                       col_offset, PyArena *arena***REMOVED***;
#define Assert(a0, a1, a2, a3, a4***REMOVED*** _Py_Assert(a0, a1, a2, a3, a4***REMOVED***
stmt_ty _Py_Assert(expr_ty test, expr_ty msg, int lineno, int col_offset,
                   PyArena *arena***REMOVED***;
#define Import(a0, a1, a2, a3***REMOVED*** _Py_Import(a0, a1, a2, a3***REMOVED***
stmt_ty _Py_Import(asdl_seq * names, int lineno, int col_offset, PyArena
                   *arena***REMOVED***;
#define ImportFrom(a0, a1, a2, a3, a4, a5***REMOVED*** _Py_ImportFrom(a0, a1, a2, a3, a4, a5***REMOVED***
stmt_ty _Py_ImportFrom(identifier module, asdl_seq * names, int level, int
                       lineno, int col_offset, PyArena *arena***REMOVED***;
#define Exec(a0, a1, a2, a3, a4, a5***REMOVED*** _Py_Exec(a0, a1, a2, a3, a4, a5***REMOVED***
stmt_ty _Py_Exec(expr_ty body, expr_ty globals, expr_ty locals, int lineno, int
                 col_offset, PyArena *arena***REMOVED***;
#define Global(a0, a1, a2, a3***REMOVED*** _Py_Global(a0, a1, a2, a3***REMOVED***
stmt_ty _Py_Global(asdl_seq * names, int lineno, int col_offset, PyArena
                   *arena***REMOVED***;
#define Expr(a0, a1, a2, a3***REMOVED*** _Py_Expr(a0, a1, a2, a3***REMOVED***
stmt_ty _Py_Expr(expr_ty value, int lineno, int col_offset, PyArena *arena***REMOVED***;
#define Pass(a0, a1, a2***REMOVED*** _Py_Pass(a0, a1, a2***REMOVED***
stmt_ty _Py_Pass(int lineno, int col_offset, PyArena *arena***REMOVED***;
#define Break(a0, a1, a2***REMOVED*** _Py_Break(a0, a1, a2***REMOVED***
stmt_ty _Py_Break(int lineno, int col_offset, PyArena *arena***REMOVED***;
#define Continue(a0, a1, a2***REMOVED*** _Py_Continue(a0, a1, a2***REMOVED***
stmt_ty _Py_Continue(int lineno, int col_offset, PyArena *arena***REMOVED***;
#define BoolOp(a0, a1, a2, a3, a4***REMOVED*** _Py_BoolOp(a0, a1, a2, a3, a4***REMOVED***
expr_ty _Py_BoolOp(boolop_ty op, asdl_seq * values, int lineno, int col_offset,
                   PyArena *arena***REMOVED***;
#define BinOp(a0, a1, a2, a3, a4, a5***REMOVED*** _Py_BinOp(a0, a1, a2, a3, a4, a5***REMOVED***
expr_ty _Py_BinOp(expr_ty left, operator_ty op, expr_ty right, int lineno, int
                  col_offset, PyArena *arena***REMOVED***;
#define UnaryOp(a0, a1, a2, a3, a4***REMOVED*** _Py_UnaryOp(a0, a1, a2, a3, a4***REMOVED***
expr_ty _Py_UnaryOp(unaryop_ty op, expr_ty operand, int lineno, int col_offset,
                    PyArena *arena***REMOVED***;
#define Lambda(a0, a1, a2, a3, a4***REMOVED*** _Py_Lambda(a0, a1, a2, a3, a4***REMOVED***
expr_ty _Py_Lambda(arguments_ty args, expr_ty body, int lineno, int col_offset,
                   PyArena *arena***REMOVED***;
#define IfExp(a0, a1, a2, a3, a4, a5***REMOVED*** _Py_IfExp(a0, a1, a2, a3, a4, a5***REMOVED***
expr_ty _Py_IfExp(expr_ty test, expr_ty body, expr_ty orelse, int lineno, int
                  col_offset, PyArena *arena***REMOVED***;
#define Dict(a0, a1, a2, a3, a4***REMOVED*** _Py_Dict(a0, a1, a2, a3, a4***REMOVED***
expr_ty _Py_Dict(asdl_seq * keys, asdl_seq * values, int lineno, int
                 col_offset, PyArena *arena***REMOVED***;
#define Set(a0, a1, a2, a3***REMOVED*** _Py_Set(a0, a1, a2, a3***REMOVED***
expr_ty _Py_Set(asdl_seq * elts, int lineno, int col_offset, PyArena *arena***REMOVED***;
#define ListComp(a0, a1, a2, a3, a4***REMOVED*** _Py_ListComp(a0, a1, a2, a3, a4***REMOVED***
expr_ty _Py_ListComp(expr_ty elt, asdl_seq * generators, int lineno, int
                     col_offset, PyArena *arena***REMOVED***;
#define SetComp(a0, a1, a2, a3, a4***REMOVED*** _Py_SetComp(a0, a1, a2, a3, a4***REMOVED***
expr_ty _Py_SetComp(expr_ty elt, asdl_seq * generators, int lineno, int
                    col_offset, PyArena *arena***REMOVED***;
#define DictComp(a0, a1, a2, a3, a4, a5***REMOVED*** _Py_DictComp(a0, a1, a2, a3, a4, a5***REMOVED***
expr_ty _Py_DictComp(expr_ty key, expr_ty value, asdl_seq * generators, int
                     lineno, int col_offset, PyArena *arena***REMOVED***;
#define GeneratorExp(a0, a1, a2, a3, a4***REMOVED*** _Py_GeneratorExp(a0, a1, a2, a3, a4***REMOVED***
expr_ty _Py_GeneratorExp(expr_ty elt, asdl_seq * generators, int lineno, int
                         col_offset, PyArena *arena***REMOVED***;
#define Yield(a0, a1, a2, a3***REMOVED*** _Py_Yield(a0, a1, a2, a3***REMOVED***
expr_ty _Py_Yield(expr_ty value, int lineno, int col_offset, PyArena *arena***REMOVED***;
#define Compare(a0, a1, a2, a3, a4, a5***REMOVED*** _Py_Compare(a0, a1, a2, a3, a4, a5***REMOVED***
expr_ty _Py_Compare(expr_ty left, asdl_int_seq * ops, asdl_seq * comparators,
                    int lineno, int col_offset, PyArena *arena***REMOVED***;
#define Call(a0, a1, a2, a3, a4, a5, a6, a7***REMOVED*** _Py_Call(a0, a1, a2, a3, a4, a5, a6, a7***REMOVED***
expr_ty _Py_Call(expr_ty func, asdl_seq * args, asdl_seq * keywords, expr_ty
                 starargs, expr_ty kwargs, int lineno, int col_offset, PyArena
                 *arena***REMOVED***;
#define Repr(a0, a1, a2, a3***REMOVED*** _Py_Repr(a0, a1, a2, a3***REMOVED***
expr_ty _Py_Repr(expr_ty value, int lineno, int col_offset, PyArena *arena***REMOVED***;
#define Num(a0, a1, a2, a3***REMOVED*** _Py_Num(a0, a1, a2, a3***REMOVED***
expr_ty _Py_Num(object n, int lineno, int col_offset, PyArena *arena***REMOVED***;
#define Str(a0, a1, a2, a3***REMOVED*** _Py_Str(a0, a1, a2, a3***REMOVED***
expr_ty _Py_Str(string s, int lineno, int col_offset, PyArena *arena***REMOVED***;
#define Attribute(a0, a1, a2, a3, a4, a5***REMOVED*** _Py_Attribute(a0, a1, a2, a3, a4, a5***REMOVED***
expr_ty _Py_Attribute(expr_ty value, identifier attr, expr_context_ty ctx, int
                      lineno, int col_offset, PyArena *arena***REMOVED***;
#define Subscript(a0, a1, a2, a3, a4, a5***REMOVED*** _Py_Subscript(a0, a1, a2, a3, a4, a5***REMOVED***
expr_ty _Py_Subscript(expr_ty value, slice_ty slice, expr_context_ty ctx, int
                      lineno, int col_offset, PyArena *arena***REMOVED***;
#define Name(a0, a1, a2, a3, a4***REMOVED*** _Py_Name(a0, a1, a2, a3, a4***REMOVED***
expr_ty _Py_Name(identifier id, expr_context_ty ctx, int lineno, int
                 col_offset, PyArena *arena***REMOVED***;
#define List(a0, a1, a2, a3, a4***REMOVED*** _Py_List(a0, a1, a2, a3, a4***REMOVED***
expr_ty _Py_List(asdl_seq * elts, expr_context_ty ctx, int lineno, int
                 col_offset, PyArena *arena***REMOVED***;
#define Tuple(a0, a1, a2, a3, a4***REMOVED*** _Py_Tuple(a0, a1, a2, a3, a4***REMOVED***
expr_ty _Py_Tuple(asdl_seq * elts, expr_context_ty ctx, int lineno, int
                  col_offset, PyArena *arena***REMOVED***;
#define Ellipsis(a0***REMOVED*** _Py_Ellipsis(a0***REMOVED***
slice_ty _Py_Ellipsis(PyArena *arena***REMOVED***;
#define Slice(a0, a1, a2, a3***REMOVED*** _Py_Slice(a0, a1, a2, a3***REMOVED***
slice_ty _Py_Slice(expr_ty lower, expr_ty upper, expr_ty step, PyArena *arena***REMOVED***;
#define ExtSlice(a0, a1***REMOVED*** _Py_ExtSlice(a0, a1***REMOVED***
slice_ty _Py_ExtSlice(asdl_seq * dims, PyArena *arena***REMOVED***;
#define Index(a0, a1***REMOVED*** _Py_Index(a0, a1***REMOVED***
slice_ty _Py_Index(expr_ty value, PyArena *arena***REMOVED***;
#define comprehension(a0, a1, a2, a3***REMOVED*** _Py_comprehension(a0, a1, a2, a3***REMOVED***
comprehension_ty _Py_comprehension(expr_ty target, expr_ty iter, asdl_seq *
                                   ifs, PyArena *arena***REMOVED***;
#define ExceptHandler(a0, a1, a2, a3, a4, a5***REMOVED*** _Py_ExceptHandler(a0, a1, a2, a3, a4, a5***REMOVED***
excepthandler_ty _Py_ExceptHandler(expr_ty type, expr_ty name, asdl_seq * body,
                                   int lineno, int col_offset, PyArena *arena***REMOVED***;
#define arguments(a0, a1, a2, a3, a4***REMOVED*** _Py_arguments(a0, a1, a2, a3, a4***REMOVED***
arguments_ty _Py_arguments(asdl_seq * args, identifier vararg, identifier
                           kwarg, asdl_seq * defaults, PyArena *arena***REMOVED***;
#define keyword(a0, a1, a2***REMOVED*** _Py_keyword(a0, a1, a2***REMOVED***
keyword_ty _Py_keyword(identifier arg, expr_ty value, PyArena *arena***REMOVED***;
#define alias(a0, a1, a2***REMOVED*** _Py_alias(a0, a1, a2***REMOVED***
alias_ty _Py_alias(identifier name, identifier asname, PyArena *arena***REMOVED***;

PyObject* PyAST_mod2obj(mod_ty t***REMOVED***;
mod_ty PyAST_obj2mod(PyObject* ast, PyArena* arena, int mode***REMOVED***;
int PyAST_Check(PyObject* obj***REMOVED***;
